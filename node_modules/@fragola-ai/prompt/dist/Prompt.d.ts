/**
 * Represents a record of variables used for string interpolation in prompts.
 * Each key in the record is a variable name to interpolate in the prompt template,
 * and its value can be any type (object, array, number, string, etc.) which will replace the placeholder.
 */
export type Variables = Record<string, any>;
export declare class MissingVariablesError extends Error {
    variables: string[];
    constructor(variables: string[], prompt: string);
}
export declare class NamespaceUndefinedError extends Error {
    namespace: string;
    constructor(namespace: string);
}
export declare class LoadFileReadError extends Error {
    filePath: string;
    originalError: Error;
    constructor(filePath: string, originalError: Error);
}
export type Load = {
    load: true;
    relativePath: string;
};
/**
 * Creates a Load object to specify a prompt file location.
 * This function is used when the prompt is located in a file system.
 * The process working directory (PWD) is used as the base path by default.
 * Path aliases can be used to reduce path overhead.
 *
 * @param {string} relativePath - The relative path to the prompt file. Can include path aliases.
 * @returns {Load} An object containing the load flag and the relative path to the prompt file
 *
 * @example
 * // Using relative path
 * load('./prompts/myPrompt.txt')
 *
 * @example
 * // Using path alias
 * load('prompts:myPrompt.txt')
 */
export declare const load: (relativePath: string) => Load;
export default class Prompt {
    #private;
    private static defaultVariableRegex;
    /**
     * A map of aliases to file paths for use with the {@link load} function.
     * Allows defining shortcuts for commonly used prompt file paths.
     *
     * @example
     * ```typescript
     * Prompt.pathAlias = {
     *   browse: "prompts",      // Maps "@browse" to "prompts/"
     *   refund: "prompts/refund" // Maps "@refund" to "prompts/refund/"
     * }
     *
     * // Usage with load():
     * load("@refund/shopRefund.md") // Resolves to "prompts/refund/shopRefund.md"
     * ```
     * @see {@link load}
     */
    static pathAlias: Record<string, string>;
    constructor(prompt: string | Load, variables?: Variables);
    /**
     * Updates the variables used for string interpolation and re-processes the prompt template.
     *
     * @param variables - Your new variables
     * @throws {MissingVariablesError} When required variables are not provided in the variables object
     */
    setVariables(variables: Variables): void;
    /**
     * Gets the original prompt string used for this instance. Before any processing
     * @returns {string} The original prompt string
     */
    get promptString(): string;
    /**
     * Gets the variables currently in use for this prompt.
     * @returns {Map<string, any>} A map containing the prompt variables and their values.
     */
    get variables(): Variables;
    /**
     * Gets the interpolated value of the prompt.
     * @returns {string} The resulting string after all variable interpolation has been applied.
     */
    get value(): string;
}
