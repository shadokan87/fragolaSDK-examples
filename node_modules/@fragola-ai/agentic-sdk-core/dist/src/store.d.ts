import type { StoreLike } from "./types";
export declare const createStore: <T extends StoreLike<any>>(data: StoreLike<T>) => Store<T>;
/**
 * Callback type for store change events.
 */
export type StoreChangeCallback<TStore = {}> = (value: StoreLike<TStore>) => void;
/**
 * A simple container for storing and updating any value.
 * Use this to keep track of information that your agent or tools need to remember or share.
 * You can get the current value, replace it, or update it based on the previous value.
 */
export declare class Store<TStore = {}> {
    #private;
    constructor(value: StoreLike<TStore>);
    /**
     * Get current store value.
     */
    get value(): StoreLike<TStore>;
    /**
     * Registers a callback function to be invoked whenever the store changes.
     *
     * @param callback - The function to call when the store changes. Receives the updated store as an argument.
     * @returns The current instance for method chaining.
     */
    onChange(callback: StoreChangeCallback<TStore>): this;
    /**
     * Change the stored value based on what it was before.
     * Useful if you want to update part of the information without replacing everything.
     */
    update(callback: (prev: StoreLike<TStore>) => StoreLike<TStore>): this;
    /**
     * Replace the stored value with something new.
     */
    set(data: StoreLike<TStore>): this;
}
