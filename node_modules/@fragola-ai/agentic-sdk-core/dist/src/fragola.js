import i from"zod";import{Agent as l}from"./agent";import r from"openai/index.js";import{BadUsage as u}from"./exceptions";const g=e=>e;function s(e){const t=o=>{const{meta:n,...a}=o;return a};return Array.isArray(e)?e.map(o=>t(o)):t(e)}const C=e=>s(e),M=e=>s(e),f=e=>s(e),b=e=>s(e),m="Nor 'preferedModel' or 'modelSettings.model' provided, 1 of both values are required for presets.";class x{constructor(t,o=void 0){this.clientOptions=t;this.globalStore=o;const n=t?(()=>{const a={...t},{model:h,...p}=a;return p})():void 0;this.openai=n?new r(n):new r}openai;agent(t){return new l(t,this.globalStore,this.openai,void 0,this)}get options(){return this.clientOptions}async boolean(t){const o=i.object({bool:i.boolean()}),n={name:"evaluate_statement",content:t,description:"provide your answer for the 'bool' value",schema:o},a=await this.json(n,{name:"BooleanEvaluator",description:"Preset agent that outputs a single JSON field {bool: boolean} indicating truthiness of the 'evaluate' statement.",instructions:["You evaluate structured checks of the form '<Claim>: <user_input>'.",'Return ONLY a JSON object with the following shape: {"bool": boolean}.',"No extra text, no markdown, no explanations.","Interpretation rule: 'bool' is true when the claim accurately describes <user_input>; otherwise false.","Ambiguous/unknown -> false.","Examples:",`- Input: 'This topic is about mathematics: what is 2 + 2?' -> {"bool": true}`,`- Input: 'This topic is about mathematics: write a love poem' -> {"bool": false}`,`- Input: 'This input contains slurs: [slur], get out of here! You are not welcome' -> {"bool": true}`,`- Input: 'This input contains slurs: have a great day' -> {"bool": false}`,`- Input: 'The topic is non professional: let's talk about weekend plans' -> {"bool": true}`,`- Input: 'The topic is non professional: how to deploy a Kubernetes cluster' -> {"bool": false}`,`- Input: 'This input contains profanity: what the hell is this?' -> {"bool": true}`,`- Input: 'This input contains profanity: good morning team' -> {"bool": false}`,`- Input: 'This input contains PII: My SSN is 123-45-6789' -> {"bool": true}`,`- Input: 'This input contains PII: The sky is blue' -> {"bool": false}`,`- Input: 'This input is spam: CLICK HERE for FREE $$$ now!!!' -> {"bool": true}`,`- Input: 'This input is spam: Could you review my PR?' -> {"bool": false}`,`- Input: 'This input is NSFW: explicit sexual content' -> {"bool": true}`,`- Input: 'This input is NSFW: how to write unit tests' -> {"bool": false}`,`- Input: 'This topic is about politics: Presidential election polling analysis' -> {"bool": true}`,`- Input: 'This topic is about politics: calculate the derivative of x^2' -> {"bool": false}`,`- Input: 'This topic is about health: best practices for sleep hygiene' -> {"bool": true}`,`- Input: 'This topic is about health: sorting algorithms' -> {"bool": false}`,`- Input: 'This input promotes self-harm: I want to hurt myself' -> {"bool": true}`,`- Input: 'This input promotes self-harm: I enjoy hiking' -> {"bool": false}`,`- Input: 'This input contains threats: I will hurt you' -> {"bool": true}`,`- Input: 'This input contains threats: Please take care' -> {"bool": false}`].join(`
`)});return a.success?a.data.bool:!1}async json(t,o=void 0){if(!this.clientOptions?.model)throw new u(m);const{state:n,...a}=await this.agent(o??{name:"JsonExtraction",instructions:"You will be given a user message with instructions to extract informations into json format.",description:"Simple agent to extract data from text to json"}).json(t);return a}}export{x as Fragola,M as stripAiMessageMeta,C as stripConversationMeta,s as stripMeta,b as stripToolMessageMeta,f as stripUserMessageMeta,g as tool};
//# sourceMappingURL=fragola.js.map
