{
  "version": 3,
  "sources": ["../../src/store.ts"],
  "sourcesContent": ["import type { StoreLike } from \"./types\";\n\n\nexport const createStore = <T extends StoreLike<any>>(data: StoreLike<T>) => new Store(data);\n\n/**\n * Callback type for store change events.\n */\nexport type StoreChangeCallback<TStore = {}> = (\n    value: StoreLike<TStore>,\n) => void;\n\n/**\n * A simple container for storing and updating any value.\n * Use this to keep track of information that your agent or tools need to remember or share.\n * You can get the current value, replace it, or update it based on the previous value.\n */\nexport class Store<TStore = {}> {\n    #value: StoreLike<TStore>;\n    #storeChangeCallbacks: StoreChangeCallback<StoreLike<TStore>>[] = [];\n\n    constructor(value: StoreLike<TStore>) {\n        this.#value = value;\n    }\n\n    /**\n     * Get current store value.\n     */\n    get value() {\n        return this.#value;\n    }\n\n    /**\n     * Registers a callback function to be invoked whenever the store changes.\n     *\n     * @param callback - The function to call when the store changes. Receives the updated store as an argument.\n     * @returns The current instance for method chaining.\n     */\n    onChange(callback: StoreChangeCallback<TStore>) {\n        this.#storeChangeCallbacks.push(callback);\n        return this;\n    }\n\n    /**\n     * Change the stored value based on what it was before.\n     * Useful if you want to update part of the information without replacing everything.\n     */\n    update(callback: (prev: StoreLike<TStore>) => StoreLike<TStore>) {\n        this.#value = callback(this.#value);\n        this.#storeChangeCallbacks.map(_callback => _callback(this.#value))\n        return this;\n    }\n\n    /**\n     * Replace the stored value with something new.\n     */\n    set(data: StoreLike<TStore>) {\n        this.#value = data;\n        this.#storeChangeCallbacks.map(_callback => _callback(this.#value))\n        return this;\n    }\n}"],
  "mappings": "AAGO,MAAMA,EAAyCC,GAAuB,IAAIC,EAAMD,CAAI,EAcpF,MAAMC,CAAmB,CAC5BC,GACAC,GAAkE,CAAC,EAEnE,YAAYC,EAA0B,CAClC,KAAKF,GAASE,CAClB,CAKA,IAAI,OAAQ,CACR,OAAO,KAAKF,EAChB,CAQA,SAASG,EAAuC,CAC5C,YAAKF,GAAsB,KAAKE,CAAQ,EACjC,IACX,CAMA,OAAOA,EAA0D,CAC7D,YAAKH,GAASG,EAAS,KAAKH,EAAM,EAClC,KAAKC,GAAsB,IAAIG,GAAaA,EAAU,KAAKJ,EAAM,CAAC,EAC3D,IACX,CAKA,IAAIF,EAAyB,CACzB,YAAKE,GAASF,EACd,KAAKG,GAAsB,IAAIG,GAAaA,EAAU,KAAKJ,EAAM,CAAC,EAC3D,IACX,CACJ",
  "names": ["createStore", "data", "Store", "#value", "#storeChangeCallbacks", "value", "callback", "_callback"]
}
