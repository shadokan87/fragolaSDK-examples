{
  "version": 3,
  "sources": ["../../src/stateUtils.ts"],
  "sourcesContent": ["import OpenAI from \"openai\";\nimport type { AgentState } from \"./agent\";\nimport type {ChatCompletionMessageParam} from \"./fragola\";\n\nconst getToolCallOrigin = (\n    conversation: OpenAI.ChatCompletionMessageParam[],\n    message: OpenAI.ChatCompletionToolMessageParam\n): OpenAI.ChatCompletionMessageToolCall | undefined => {\n    let found: OpenAI.ChatCompletionMessageToolCall | undefined = undefined;\n    conversation.find(msg => {\n        if (\n            msg.role === \"assistant\" &&\n            msg.tool_calls &&\n            msg.tool_calls.some(toolCall => {\n                if (toolCall.id === message.tool_call_id) {\n                    found = toolCall;\n                    return true;\n                }\n                return false;\n            })\n        ) {\n            return true;\n        }\n        return false;\n    });\n    return found;\n};\n\nexport function conversationUtils(conversation: OpenAI.ChatCompletionMessageParam[]) {\n    return {\n        /**\n         * From a role 'tool' message, return its origin where requested by the model in the conversation\n         * \n         * @param message - The tool message parameter containing the tool call ID to search for.\n         * @returns The matching tool call object if found, otherwise `undefined`.\n         *\n         * @example\n         * const utils = createStateUtils(state);\n         * // Assuming the message is the following\n         * // { role: \"tool\", tool_call_id: \"tool_123\", content: \"Result\" };\n         * const toolCall = utils.toolCallOrigin(state.conversation.at(-1).tool_calls[0]);\n         * // toolCall will be { id: \"tool_123\", function: { name: \"getWeather\", arguments: \"{}\" } }\n         */\n        toolCallOrigin: (message: OpenAI.ChatCompletionToolMessageParam) => {\n            return getToolCallOrigin(conversation, message);\n        },\n\n        /**\n         * Returns the final assistant output message from the conversation.\n         *\n         * This returns the last message in the conversation if it is an assistant message\n         * and does not contain any tool calls (i.e., it is a final response, not a tool request).\n         *\n         * @returns The final assistant message if present, otherwise `undefined`.\n         *\n         * @example\n         * const utils = createStateUtils(state);\n         * const finalOutput = utils.finalOutput();\n         * if (finalOutput) {\n         *   console.log(finalOutput.content);\n         * }\n         */\n        finalOutput: () => {\n            const lastMessage = conversation.at(-1);\n            if (!lastMessage || !(lastMessage.role == \"assistant\" && !lastMessage.tool_calls))\n                return undefined;\n            return lastMessage;\n        },\n\n        /**\n         * Returns the last message in the conversation matching the provided role.\n         *\n         * @param role - One of \"user\", \"tool\", or \"assistant\".\n         * @returns The last message with the specified role, or `undefined` if none found.\n         *\n         * @example\n         * const utils = createStateUtils(state);\n         * const lastUser = utils.messageByRole(\"user\");\n         */\n        messageByRole: (role: \"user\" | \"tool\" | \"assistant\"): OpenAI.ChatCompletionMessageParam | undefined => {\n            for (let i = conversation.length - 1; i >= 0; i--) {\n                const msg = conversation[i];\n                if (msg.role === role) return msg;\n            }\n            return undefined;\n        }\n    };\n}"],
  "mappings": "AAAA,MAAmB,SAInB,MAAMA,EAAoB,CACtBC,EACAC,IACmD,CACnD,IAAIC,EACJ,OAAAF,EAAa,KAAKG,GAEV,GAAAA,EAAI,OAAS,aACbA,EAAI,YACJA,EAAI,WAAW,KAAKC,GACZA,EAAS,KAAOH,EAAQ,cACxBC,EAAQE,EACD,IAEJ,EACV,EAKR,EACMF,CACX,EAEO,SAASG,EAAkBL,EAAmD,CACjF,MAAO,CAcH,eAAiBC,GACNF,EAAkBC,EAAcC,CAAO,EAkBlD,YAAa,IAAM,CACf,MAAMK,EAAcN,EAAa,GAAG,EAAE,EACtC,GAAI,GAACM,GAAe,EAAEA,EAAY,MAAQ,aAAe,CAACA,EAAY,aAEtE,OAAOA,CACX,EAYA,cAAgBC,GAAuF,CACnG,QAASC,EAAIR,EAAa,OAAS,EAAGQ,GAAK,EAAGA,IAAK,CAC/C,MAAML,EAAMH,EAAaQ,CAAC,EAC1B,GAAIL,EAAI,OAASI,EAAM,OAAOJ,CAClC,CAEJ,CACJ,CACJ",
  "names": ["getToolCallOrigin", "conversation", "message", "found", "msg", "toolCall", "conversationUtils", "lastMessage", "role", "i"]
}
