import { FragolaError } from "@src/exceptions";
import type OpenAI from "openai";
import type { FragolaHook } from "..";
import type { AgentContext } from "@src/agent";
import type { maybePromise } from "@src/types";
declare const SYM_GUARDRAIL_FAIL: unique symbol;
declare const _GuardRailFail: {
    message: string;
    [SYM_GUARDRAIL_FAIL]: boolean;
};
export type GuardRailFailType = typeof _GuardRailFail;
export declare const fail: (message: string) => {
    message: string;
    [SYM_GUARDRAIL_FAIL]: boolean;
};
export type Guardrail = (fail: (message: string) => GuardRailFailType, userMessage: OpenAI.ChatCompletionUserMessageParam, context: AgentContext) => maybePromise<void | GuardRailFailType>;
export type GuardRailMeta = {
    guardrail: {
        /** Wether the user message passed the guardrail tests*/
        rejected: true;
        /** The name of the guardrail */
        guard: string;
        /** The rejection message */
        reason: string;
    } | {
        rejected: false;
    };
};
export declare class GuardrailConstrain extends FragolaError {
    constructor(message: string, guardrailName: string);
}
export declare const guardrail: (guardrails: Guardrail[], rejectionBehaviour?: "keepAndAnnotate" | "remove") => FragolaHook;
export {};
