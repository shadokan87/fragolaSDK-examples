import{nanoid as m}from"nanoid";import a from"fs/promises";import p from"path";import u from"fs";const A=s=>l=>{let t;l.onAfterConversationUpdate(async(f,c)=>{if(f=="partialAiMessage")return;const{conversation:r}=c.state;let e;for(let n=0;n<r.length;n++)r[n].role=="user"&&(e=r[n]);if(e){if(!t){const n=(()=>{if(typeof e.content=="string")return e.content.length>10?e.content.substring(0,3)+"..."+e.content.slice(-3):e.content;if(Array.isArray(e.content)){const o=e.content.filter(i=>i.type==="text").map(i=>i.text).join(" ");return o.length>10?o.substring(0,3)+"..."+o.slice(-3):o}return"<no_label>"})();t=p.join(s,n),u.existsSync(t+".json")?t=`${t}-${m()}.json`:t=`${t}.json`}try{await a.mkdir(s,{recursive:!0}),await a.writeFile(t,JSON.stringify(r,null,2),"utf8")}catch(n){console.error("Failed to save conversation:",n)}}})};export{A as fileSystemSave};
//# sourceMappingURL=fileSystemSave.js.map
