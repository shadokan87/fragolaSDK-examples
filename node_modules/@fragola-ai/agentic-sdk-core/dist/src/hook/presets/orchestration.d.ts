import { type AgentAny } from "@src/agent";
import type { FragolaHook } from "..";
import type { UserMessageQuery } from "@src/agent";
import type { maybePromise } from "@src/types";
import { FragolaError } from "@src/exceptions";
export declare namespace OrchestrationType {
    type participants = AgentAny[];
    type flowValue = {
        to: participants[0] | "*";
        bidirectional?: boolean;
    };
    type flow = [AgentAny, flowValue][];
    type config = {
        participants: participants;
        flow: flow;
        onMessage?: (source: AgentAny, dest: AgentAny, message: UserMessageQuery, reject: (reason: string) => string) => maybePromise<string | UserMessageQuery>;
    };
}
export type OrchestrationBuilder = (lead: AgentAny) => OrchestrationType.config;
export declare class OrchestrationBadConfig extends FragolaError {
    constructor(message: string, cause: string);
}
export declare const orchestration: (build: OrchestrationBuilder) => FragolaHook;
