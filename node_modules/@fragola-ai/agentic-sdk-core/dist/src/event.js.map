{
  "version": 3,
  "sources": ["../../src/event.ts"],
  "sourcesContent": ["import type { AgentContext } from \"./agent\";\nimport type { StoreLike, maybePromise } from \"./types\";\nimport type { DefineMetaData } from \"./fragola\";\n\nexport type AgentDefaultEventId =\n  \"apiCall\" | \"stateUpdate\" | \"modelInvocation\" | \"toolCall\" | \"aiMessage\" | \"userMessage\";\n\nexport type AgentAfterEventId = `after:${AgentDefaultEventId | \"conversationUpdate\"}`;\n\nexport const SKIP_EVENT = Symbol('skip_event');\n/**\n * When returned from an event handler, the event will be ignored.\n * \n * @returns An object with the SKIP_EVENT symbol that signals the event system to skip this event\n */\nexport const skip = () => ({[SKIP_EVENT]: true});\nexport type eventResult<T> = T | ReturnType<typeof skip>;\n\nexport type AgentEventId = AgentDefaultEventId | AgentAfterEventId;\n\nexport type EventDefaultCallback<TMetaData extends DefineMetaData<any>, TGlobalStore extends StoreLike<any>, TStore extends StoreLike<any>> = (\n  context: AgentContext<TMetaData, TGlobalStore, TStore>\n) => maybePromise<void>;"],
  "mappings": "AASO,MAAMA,EAAa,OAAO,YAAY,EAMhCC,EAAO,KAAO,CAAC,CAACD,CAAU,EAAG,EAAI",
  "names": ["SKIP_EVENT", "skip"]
}
