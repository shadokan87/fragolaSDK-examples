import type { AgentAfterEventId, AgentDefaultEventId, AgentEventId } from "../../event";
import { type callbackMap as eventDefaultCallbackMap } from "../../eventDefault";
import { type callbackMap as eventAfterCallbackMap } from "../../eventAfter";
import type { DefineMetaData } from "../../fragola";
import type { StoreLike } from "../../types";
import type { AgentContext } from "../../agent";
import { type HandleAiMessage } from "./aiMessage";
import { type HandleUserMessage } from "./userMessage";
/**
 * Maps an event ID to its corresponding callback type based on the event category.
 *
 * - For default event IDs (`AgentDefaultEventId`), returns the callback type from `eventDefaultCallbackMap`.
 * - For other event IDs, resolves to `never`.
 *
 * @template TEventId - The type of the event ID.
 * @template TGlobalStore - The type of the global store.
 * @template TStore - The type of the local store.
 */
export type eventIdToCallback<TEventId extends AgentEventId, TMetaData extends DefineMetaData<any>, TGlobalStore extends StoreLike<any>, TStore extends StoreLike<any>> = TEventId extends AgentDefaultEventId ? eventDefaultCallbackMap<TMetaData, TGlobalStore, TStore>[TEventId] : TEventId extends AgentAfterEventId ? eventAfterCallbackMap<TMetaData, TGlobalStore, TStore>[TEventId] : never;
export type registeredEvent<TEventId extends AgentEventId, TMetaData extends DefineMetaData<any>, TGlobalStore extends StoreLike<any>, TStore extends StoreLike<any>> = {
    id: string;
    callback: eventIdToCallback<TEventId, TMetaData, TGlobalStore, TStore>;
};
export declare class EventMap<K extends AgentEventId, V extends registeredEvent<AgentEventId, TMetaData, TGlobalStore, TStore>[], TMetaData extends DefineMetaData<any>, TGlobalStore extends StoreLike<any> = {}, TStore extends StoreLike<any> = {}> extends globalThis.Map<K, V> {
    #private;
    private getContext;
    constructor(getContext: () => AgentContext<TMetaData, TGlobalStore, TStore>, ...args: ConstructorParameters<typeof Map<K, V>>);
    get handleAiMessage(): HandleAiMessage;
    get handleUserMessage(): HandleUserMessage | undefined;
    set(key: K, value: V): this;
    delete(key: K): boolean;
}
