{
  "version": 3,
  "sources": ["../../../../src/extendedJS/events/EventMap.ts"],
  "sourcesContent": ["import type { AgentAfterEventId, AgentDefaultEventId, AgentEventId } from \"../../event\";\nimport { type callbackMap as eventDefaultCallbackMap } from \"../../eventDefault\";\nimport { type callbackMap as eventAfterCallbackMap } from \"../../eventAfter\";\nimport type { DefineMetaData } from \"../../fragola\";\nimport type { StoreLike } from \"../../types\";\nimport type { AgentContext } from \"../../agent\";\nimport { createHandleAiMessage, defaultHandleAiMessage, type HandleAiMessage } from \"./aiMessage\";\nimport { createHandleUserMessage, type HandleUserMessage } from \"./userMessage\";\n\n/**\n * Maps an event ID to its corresponding callback type based on the event category.\n *\n * - For default event IDs (`AgentDefaultEventId`), returns the callback type from `eventDefaultCallbackMap`.\n * - For other event IDs, resolves to `never`.\n *\n * @template TEventId - The type of the event ID.\n * @template TGlobalStore - The type of the global store.\n * @template TStore - The type of the local store.\n */\nexport type eventIdToCallback<TEventId extends AgentEventId, TMetaData extends DefineMetaData<any>, TGlobalStore extends StoreLike<any>, TStore extends StoreLike<any>> =\n    TEventId extends AgentDefaultEventId ? eventDefaultCallbackMap<TMetaData, TGlobalStore, TStore>[TEventId] :\n    TEventId extends AgentAfterEventId ? eventAfterCallbackMap<TMetaData, TGlobalStore, TStore>[TEventId] :\n    never;\n\n// default values for caching for events callback\n// -> Ai message\nexport type registeredEvent<TEventId extends AgentEventId, TMetaData extends DefineMetaData<any>, TGlobalStore extends StoreLike<any>, TStore extends StoreLike<any>> = {\n    id: string,\n    callback: eventIdToCallback<TEventId, TMetaData, TGlobalStore, TStore>\n}\n\nexport class EventMap<\n    K extends AgentEventId, V extends registeredEvent<AgentEventId, TMetaData, TGlobalStore, TStore>[],\n    TMetaData extends DefineMetaData<any>,\n    TGlobalStore extends StoreLike<any> = {},\n    TStore extends StoreLike<any> = {}>\n    extends globalThis.Map<K, V> {\n\n    #handleAiMessage: HandleAiMessage = defaultHandleAiMessage;\n    #handleUserMessage: HandleUserMessage | undefined = undefined;\n    constructor(private getContext: () => AgentContext<TMetaData, TGlobalStore, TStore>, ...args: ConstructorParameters<typeof Map<K, V>>) {\n        super(...args);\n    }\n\n    get handleAiMessage() {\n        return this.#handleAiMessage;\n    }\n\n    get handleUserMessage() {\n        return this.#handleUserMessage;\n    }\n\n    set(key: K, value: V): this {\n        super.set(key, value);\n        switch (key) {\n            case \"aiMessage\": {\n                this.#handleAiMessage = createHandleAiMessage(value as registeredEvent<\"aiMessage\", TMetaData, TGlobalStore, TStore>[], this.getContext as unknown as () => AgentContext<any>);\n                break;\n            }\n            case \"userMessage\": {\n                this.#handleUserMessage = createHandleUserMessage(value as registeredEvent<\"userMessage\", TMetaData, TGlobalStore, TStore>[], this.getContext as unknown as () => AgentContext<any>)\n                break ;\n            }\n            default: {\n                break;\n            }\n        }\n        return this;\n    }\n\n    delete(key: K): boolean {\n        const res = super.delete(key);\n        if (res) {\n            switch (key) {\n                case \"aiMessage\": {\n                    this.#handleAiMessage = defaultHandleAiMessage;\n                    break;\n                } case \"userMessage\": {\n                    this.#handleUserMessage = undefined;\n                    break ;\n                }\n                default: {\n                    break;\n                }\n            }\n        }\n        return res;\n    }\n}"],
  "mappings": "AACA,MAA4D,qBAC5D,MAA0D,mBAI1D,OAAS,yBAAAA,EAAuB,0BAAAC,MAAoD,cACpF,OAAS,2BAAAC,MAAuD,gBAwBzD,MAAMC,UAKD,WAAW,GAAU,CAI7B,YAAoBC,KAAoEC,EAA+C,CACnI,MAAM,GAAGA,CAAI,EADG,gBAAAD,CAEpB,CAJAE,GAAoCL,EACpCM,GAAoD,OAKpD,IAAI,iBAAkB,CAClB,OAAO,KAAKD,EAChB,CAEA,IAAI,mBAAoB,CACpB,OAAO,KAAKC,EAChB,CAEA,IAAIC,EAAQC,EAAgB,CAExB,OADA,MAAM,IAAID,EAAKC,CAAK,EACZD,EAAK,CACT,IAAK,YAAa,CACd,KAAKF,GAAmBN,EAAsBS,EAA0E,KAAK,UAAgD,EAC7K,KACJ,CACA,IAAK,cAAe,CAChB,KAAKF,GAAqBL,EAAwBO,EAA4E,KAAK,UAAgD,EACnL,KACJ,CACA,QACI,KAER,CACA,OAAO,IACX,CAEA,OAAOD,EAAiB,CACpB,MAAME,EAAM,MAAM,OAAOF,CAAG,EAC5B,GAAIE,EACA,OAAQF,EAAK,CACT,IAAK,YAAa,CACd,KAAKF,GAAmBL,EACxB,KACJ,CAAE,IAAK,cAAe,CAClB,KAAKM,GAAqB,OAC1B,KACJ,CACA,QACI,KAER,CAEJ,OAAOG,CACX,CACJ",
  "names": ["createHandleAiMessage", "defaultHandleAiMessage", "createHandleUserMessage", "EventMap", "getContext", "args", "#handleAiMessage", "#handleUserMessage", "key", "value", "res"]
}
