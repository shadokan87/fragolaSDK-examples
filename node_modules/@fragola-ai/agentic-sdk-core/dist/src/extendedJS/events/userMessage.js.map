{
  "version": 3,
  "sources": ["../../../../src/extendedJS/events/userMessage.ts"],
  "sourcesContent": ["import type { AgentContext } from \"../../agent\";\nimport type { ChatCompletionUserMessageParam } from \"../../fragola\";\nimport type { StoreLike } from \"../../types\";\nimport { isSkipEvent } from \"../../utils\";\nimport type { registeredEvent } from \"./EventMap\";\n\nexport type HandleUserMessage = (_message: Omit<ChatCompletionUserMessageParam, \"role\">) => Promise<typeof _message>;\nexport function createHandleUserMessage<\n    TGlobalStore extends StoreLike<any> = {},\n    TStore extends StoreLike<any> = {}>(events: registeredEvent<\"userMessage\", any, TGlobalStore, TStore>[], getContext: () => AgentContext<any>): HandleUserMessage {\n    const callback: HandleUserMessage = async (_message) => {\n        let message = _message;\n        for (let i = 0; i < events.length; i++) {\n            const event = events[i];\n            const callbackResult = await event.callback({role: \"user\", ...message} as any, getContext() as any);\n            if (isSkipEvent(callbackResult))\n                continue;\n            message = callbackResult as typeof _message;\n        }\n        return message;\n    }\n    return callback;\n}"],
  "mappings": "AAGA,OAAS,eAAAA,MAAmB,cAIrB,SAASC,EAEwBC,EAAqEC,EAAwD,CAYjK,MAXoC,OAAOC,GAAa,CACpD,IAAIC,EAAUD,EACd,QAASE,EAAI,EAAGA,EAAIJ,EAAO,OAAQI,IAAK,CAEpC,MAAMC,EAAiB,MADTL,EAAOI,CAAC,EACa,SAAS,CAAC,KAAM,OAAQ,GAAGD,CAAO,EAAUF,EAAW,CAAQ,EAC9FH,EAAYO,CAAc,IAE9BF,EAAUE,EACd,CACA,OAAOF,CACX,CAEJ",
  "names": ["isSkipEvent", "createHandleUserMessage", "events", "getContext", "_message", "message", "i", "callbackResult"]
}
