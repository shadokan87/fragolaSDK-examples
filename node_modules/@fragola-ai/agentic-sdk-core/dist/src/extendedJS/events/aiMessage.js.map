{
  "version": 3,
  "sources": ["../../../../src/extendedJS/events/aiMessage.ts"],
  "sourcesContent": ["import type { AgentContext } from \"../../agent\";\nimport type { EventAiMessage } from \"../../eventDefault\";\nimport type { ChatCompletionAssistantMessageParam } from \"../../fragola\";\nimport type { maybePromise, StoreLike } from \"../../types\";\nimport { isSkipEvent } from \"../../utils\";\nimport type { registeredEvent } from \"./EventMap\";\n\nexport type HandleAiMessage = (message: ChatCompletionAssistantMessageParam, isPartial: boolean) => maybePromise<ChatCompletionAssistantMessageParam>;\nexport const defaultHandleAiMessage: HandleAiMessage = (message) => message;\nexport function createHandleAiMessage<\n    TGlobalStore extends StoreLike<any> = {},\n    TStore extends StoreLike<any> = {}>\n    (events: registeredEvent<\"aiMessage\", any, TGlobalStore, TStore>[], getContext: () => AgentContext<any>): HandleAiMessage {\n    const callback: HandleAiMessage = async (message, isPartial) => {\n        type EventCallbackType = EventAiMessage<any, TGlobalStore, TStore>;\n        let callbackResult: ReturnType<EventCallbackType>;\n        let result: ChatCompletionAssistantMessageParam | undefined = undefined;\n\n        for (let i = 0; i < events.length; i++) {\n            const event = events[i];\n                callbackResult = await (event.callback as EventCallbackType)(!result ? message : result, isPartial, getContext() as any);\n                if (isSkipEvent(callbackResult))\n                    continue;\n                result = callbackResult as ChatCompletionAssistantMessageParam;\n        }\n        // It is possible that every events returns skip, in this case the aiMessage should be assigned to the default value\n        if (!result)\n            result = await defaultHandleAiMessage(message, isPartial);\n        return result as ChatCompletionAssistantMessageParam;\n    };\n    return callback;\n}"],
  "mappings": "AAIA,OAAS,eAAAA,MAAmB,cAIrB,MAAMC,EAA2CC,GAAYA,EAC7D,SAASC,EAGXC,EAAmEC,EAAsD,CAkB1H,MAjBkC,OAAOH,EAASI,IAAc,CAE5D,IAAIC,EACAC,EAEJ,QAASC,EAAI,EAAGA,EAAIL,EAAO,OAAQK,IAE3BF,EAAiB,MADPH,EAAOK,CAAC,EACY,SAAgCD,GAASN,EAAkBI,EAAWD,EAAW,CAAQ,EACnH,CAAAL,EAAYO,CAAc,IAE9BC,EAASD,GAGjB,OAAKC,IACDA,EAAS,MAAMP,EAAuBC,EAASI,CAAS,GACrDE,CACX,CAEJ",
  "names": ["isSkipEvent", "defaultHandleAiMessage", "message", "createHandleAiMessage", "events", "getContext", "isPartial", "callbackResult", "result", "i"]
}
